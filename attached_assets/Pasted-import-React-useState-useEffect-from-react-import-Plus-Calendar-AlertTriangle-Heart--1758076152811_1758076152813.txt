import React, { useState, useEffect } from 'react';
import { Plus, Calendar, AlertTriangle, Heart, Clock, User, LogOut } from 'lucide-react';

const App = () => {
  const mockUser = {
    id: 1,
    name: 'Abraham',
    email: 'abraham@example.com',
    subscription: 'free',
    verified: true
  };

  const [user, setUser] = useState(mockUser);
  const [dogs, setDogs] = useState([]);
  const [currentView, setCurrentView] = useState('dashboard');
  const [selectedDog, setSelectedDog] = useState(null);
  const [showModal, setShowModal] = useState(false);
  const [modalType, setModalType] = useState('');
  const [healthRecords, setHealthRecords] = useState([]);
  const [appointments, setAppointments] = useState([]);

  const [dogForm, setDogForm] = useState({
    name: '',
    breed: '',
    birthDate: '',
    weight: '',
    gender: '',
    microchipId: ''
  });

  const [healthForm, setHealthForm] = useState({
    dogId: '',
    symptoms: '',
    severity: 'Low',
    notes: '',
    date: new Date().toISOString().split('T')[0]
  });

  const [appointmentForm, setAppointmentForm] = useState({
    dogId: '',
    date: '',
    time: '',
    vetClinic: '',
    purpose: '',
    notes: ''
  });

  useEffect(() => {
    if (dogs.length === 0) {
      const sampleDog = {
        id: 1,
        name: 'Max',
        breed: 'Golden Retriever',
        birthDate: '2020-05-15',
        weight: '65',
        gender: 'Male',
        microchipId: '123456789'
      };
      setDogs([sampleDog]);
      
      const sampleHealth = {
        id: 1,
        dogId: 1,
        symptoms: 'Mild limping after walk',
        severity: 'Low',
        notes: 'Noticed slight favoring of right front paw',
        date: '2024-09-15'
      };
      setHealthRecords([sampleHealth]);

      const sampleAppointment = {
        id: 1,
        dogId: 1,
        date: '2024-09-20',
        time: '14:00',
        vetClinic: 'City Veterinary Clinic',
        purpose: 'Annual Checkup',
        notes: 'Routine vaccination and health check',
        status: 'scheduled'
      };
      setAppointments([sampleAppointment]);
    }
  }, []);

  const openModal = (type) => {
    setModalType(type);
    setShowModal(true);
    if (type === 'healthLog' && selectedDog) {
      setHealthForm({ ...healthForm, dogId: selectedDog.id });
    }
    if (type === 'appointment' && selectedDog) {
      setAppointmentForm({ ...appointmentForm, dogId: selectedDog.id });
    }
  };

  const closeModal = () => {
    setShowModal(false);
    setModalType('');
    setSelectedDog(null);
  };

  const handleAddDog = (e) => {
    e.preventDefault();
    const newDog = {
      ...dogForm,
      id: dogs.length + 1
    };
    setDogs([...dogs, newDog]);
    setDogForm({
      name: '',
      breed: '',
      birthDate: '',
      weight: '',
      gender: '',
      microchipId: ''
    });
    closeModal();
  };

  const handleAddHealthRecord = (e) => {
    e.preventDefault();
    const newRecord = {
      ...healthForm,
      id: healthRecords.length + 1
    };
    setHealthRecords([...healthRecords, newRecord]);
    setHealthForm({
      dogId: '',
      symptoms: '',
      severity: 'Low',
      notes: '',
      date: new Date().toISOString().split('T')[0]
    });
    closeModal();
  };

  const handleAddAppointment = (e) => {
    e.preventDefault();
    const newAppointment = {
      ...appointmentForm,
      id: appointments.length + 1,
      status: 'scheduled'
    };
    setAppointments([...appointments, newAppointment]);
    setAppointmentForm({
      dogId: '',
      date: '',
      time: '',
      vetClinic: '',
      purpose: '',
      notes: ''
    });
    closeModal();
  };

  const handleUpgradeToPremium = () => {
    alert('Redirecting to Stripe checkout... (Demo)');
    setUser({ ...user, subscription: 'premium' });
  };

  const renderCurrentView = () => {
    switch (currentView) {
      case 'dogs':
        return (
          <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
            <div className="flex justify-between items-center mb-8">
              <h1 className="text-3xl font-bold text-gray-900">My Dogs</h1>
              <button
                onClick={() => openModal('addDog')}
                className="bg-teal-600 text-white px-4 py-2 rounded-md hover:bg-teal-700 flex items-center"
              >
                <Plus className="h-4 w-4 mr-2" />
                Add Dog
              </button>
            </div>

            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
              {dogs.map((dog) => (
                <div key={dog.id} className="bg-white rounded-lg shadow p-6">
                  <div className="flex items-center mb-4">
                    <div className="w-16 h-16 bg-teal-100 rounded-full flex items-center justify-center">
                      <Heart className="h-8 w-8 text-teal-600" />
                    </div>
                    <div className="ml-4">
                      <h3 className="text-xl font-bold">{dog.name}</h3>
                      <p className="text-gray-600">{dog.breed}</p>
                    </div>
                  </div>
                  <div className="space-y-2 text-sm">
                    <div className="flex justify-between">
                      <span className="text-gray-500">Age:</span>
                      <span>{new Date().getFullYear() - new Date(dog.birthDate).getFullYear()} years</span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-gray-500">Weight:</span>
                      <span>{dog.weight} lbs</span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-gray-500">Gender:</span>
                      <span>{dog.gender}</span>
                    </div>
                  </div>
                  <div className="mt-4 flex space-x-2">
                    <button
                      onClick={() => {
                        setSelectedDog(dog);
                        openModal('healthLog');
                      }}
                      className="flex-1 bg-orange-500 text-white px-3 py-2 rounded text-sm hover:bg-orange-600"
                    >
                      Log Health
                    </button>
                    <button
                      onClick={() => {
                        setSelectedDog(dog);
                        openModal('appointment');
                      }}
                      className="flex-1 bg-blue-500 text-white px-3 py-2 rounded text-sm hover:bg-blue-600"
                    >
                      Schedule Apt
                    </button>
                  </div>
                </div>
              ))}
            </div>
          </div>
        );

      case 'health':
        return (
          <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
            <div className="flex justify-between items-center mb-8">
              <h1 className="text-3xl font-bold text-gray-900">Health Records</h1>
              <button
                onClick={() => openModal('healthLog')}
                className="bg-orange-500 text-white px-4 py-2 rounded-md hover:bg-orange-600 flex items-center"
              >
                <Plus className="h-4 w-4 mr-2" />
                Log Health Issue
              </button>
            </div>

            <div className="bg-white rounded-lg shadow">
              <div className="px-6 py-4 border-b">
                <h2 className="text-lg font-semibold">Health Timeline</h2>
              </div>
              <div className="p-6">
                {healthRecords.length > 0 ? (
                  <div className="space-y-6">
                    {healthRecords.map((record) => {
                      const dog = dogs.find(d => d.id === record.dogId);
                      const severityColors = {
                        High: 'border-red-500 bg-red-50',
                        Medium: 'border-yellow-500 bg-yellow-50',
                        Low: 'border-green-500 bg-green-50'
                      };
                      
                      return (
                        <div key={record.id} className={`border-l-4 rounded-lg p-4 ${severityColors[record.severity] || 'border-gray-500 bg-gray-50'}`}>
                          <div className="flex justify-between items-start mb-2">
                            <div>
                              <h3 className="font-semibold">{dog?.name}</h3>
                              <p className="text-sm text-gray-600">Severity: {record.severity}</p>
                            </div>
                            <span className="text-sm text-gray-500">{record.date}</span>
                          </div>
                          <p className="text-gray-800 mb-2">{record.symptoms}</p>
                          {record.notes && (
                            <p className="text-sm text-gray-600">Notes: {record.notes}</p>
                          )}
                        </div>
                      );
                    })}
                  </div>
                ) : (
                  <p className="text-gray-500 text-center py-8">No health records yet.</p>
                )}
              </div>
            </div>
          </div>
        );

      case 'appointments':
        return (
          <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
            <div className="flex justify-between items-center mb-8">
              <h1 className="text-3xl font-bold text-gray-900">Appointments</h1>
              <button
                onClick={() => openModal('appointment')}
                className="bg-blue-500 text-white px-4 py-2 rounded-md hover:bg-blue-600 flex items-center"
              >
                <Plus className="h-4 w-4 mr-2" />
                Schedule Appointment
              </button>
            </div>

            <div className="bg-white rounded-lg shadow">
              <div className="px-6 py-4 border-b">
                <h2 className="text-lg font-semibold">Scheduled Appointments</h2>
              </div>
              <div className="p-6">
                {appointments.length > 0 ? (
                  <div className="space-y-4">
                    {appointments.map((appointment) => {
                      const dog = dogs.find(d => d.id === appointment.dogId);
                      
                      return (
                        <div key={appointment.id} className="border rounded-lg p-4">
                          <div className="flex justify-between items-start mb-2">
                            <div>
                              <h3 className="font-semibold">{dog?.name}</h3>
                              <p className="text-gray-600">{appointment.purpose}</p>
                            </div>
                            <span className="px-2 py-1 bg-blue-100 text-blue-800 rounded text-xs font-medium">
                              {appointment.status}
                            </span>
                          </div>
                          <div className="grid grid-cols-2 gap-4 text-sm text-gray-600">
                            <div>
                              <span className="font-medium">Date:</span> {appointment.date}
                            </div>
                            <div>
                              <span className="font-medium">Time:</span> {appointment.time}
                            </div>
                            <div>
                              <span className="font-medium">Clinic:</span> {appointment.vetClinic}
                            </div>
                          </div>
                          {appointment.notes && (
                            <p className="mt-2 text-sm text-gray-600">Notes: {appointment.notes}</p>
                          )}
                        </div>
                      );
                    })}
                  </div>
                ) : (
                  <p className="text-gray-500 text-center py-8">No appointments scheduled yet.</p>
                )}
              </div>
            </div>
          </div>
        );

      default:
        return (
          <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
            <div className="mb-8">
              <h1 className="text-3xl font-bold text-gray-900">Dashboard</h1>
              <p className="mt-2 text-gray-600">Good morning, {user.name}!</p>
            </div>

            <div className="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8">
              <div className="bg-white rounded-lg shadow p-6">
                <div className="flex items-center">
                  <Heart className="h-8 w-8 text-teal-600" />
                  <div className="ml-4">
                    <p className="text-sm text-gray-500">My Dogs</p>
                    <p className="text-2xl font-bold">{dogs.length}</p>
                  </div>
                </div>
              </div>
              <div className="bg-white rounded-lg shadow p-6">
                <div className="flex items-center">
                  <AlertTriangle className="h-8 w-8 text-orange-500" />
                  <div className="ml-4">
                    <p className="text-sm text-gray-500">Health Records</p>
                    <p className="text-2xl font-bold">{healthRecords.length}</p>
                  </div>
                </div>
              </div>
              <div className="bg-white rounded-lg shadow p-6">
                <div className="flex items-center">
                  <Calendar className="h-8 w-8 text-blue-500" />
                  <div className="ml-4">
                    <p className="text-sm text-gray-500">Appointments</p>
                    <p className="text-2xl font-bold">{appointments.length}</p>
                  </div>
                </div>
              </div>
              <div className="bg-white rounded-lg shadow p-6">
                <div className="flex items-center">
                  <Clock className="h-8 w-8 text-purple-500" />
                  <div className="ml-4">
                    <p className="text-sm text-gray-500">Plan</p>
                    <p className="text-lg font-semibold capitalize">{user.subscription}</p>
                  </div>
                </div>
              </div>
            </div>

            <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
              <div className="bg-white rounded-lg shadow p-6">
                <h3 className="text-lg font-semibold mb-4">Quick Actions</h3>
                <div className="space-y-3">
                  <button
                    onClick={() => openModal('addDog')}
                    className="w-full bg-teal-600 text-white px-4 py-2 rounded-md hover:bg-teal-700 flex items-center justify-center"
                  >
                    <Plus className="h-4 w-4 mr-2" />
                    Add Dog
                  </button>
                  <button
                    onClick={() => openModal('healthLog')}
                    className="w-full bg-orange-500 text-white px-4 py-2 rounded-md hover:bg-orange-600 flex items-center justify-center"
                  >
                    <AlertTriangle className="h-4 w-4 mr-2" />
                    Log Health Issue
                  </button>
                  <button
                    onClick={() => openModal('appointment')}
                    className="w-full bg-blue-500 text-white px-4 py-2 rounded-md hover:bg-blue-600 flex items-center justify-center"
                  >
                    <Calendar className="h-4 w-4 mr-2" />
                    Schedule Appointment
                  </button>
                </div>
              </div>

              <div className="bg-white rounded-lg shadow p-6">
                <h3 className="text-lg font-semibold mb-4">Recent Health Records</h3>
                {healthRecords.length > 0 ? (
                  <div className="space-y-3">
                    {healthRecords.slice(0, 3).map((record) => {
                      const dog = dogs.find(d => d.id === record.dogId);
                      return (
                        <div key={record.id} className="border-l-4 border-orange-500 pl-4">
                          <p className="font-medium">{dog?.name}</p>
                          <p className="text-sm text-gray-600">{record.symptoms}</p>
                          <p className="text-xs text-gray-400">{record.date}</p>
                        </div>
                      );
                    })}
                  </div>
                ) : (
                  <p className="text-gray-500 text-sm">No health records yet</p>
                )}
              </div>

              <div className="bg-white rounded-lg shadow p-6">
                <h3 className="text-lg font-semibold mb-4">Upcoming Appointments</h3>
                {appointments.length > 0 ? (
                  <div className="space-y-3">
                    {appointments.filter(apt => apt.status === 'scheduled').slice(0, 3).map((appointment) => {
                      const dog = dogs.find(d => d.id === appointment.dogId);
                      return (
                        <div key={appointment.id} className="border-l-4 border-blue-500 pl-4">
                          <p className="font-medium">{dog?.name}</p>
                          <p className="text-sm text-gray-600">{appointment.purpose}</p>
                          <p className="text-xs text-gray-400">{appointment.date} at {appointment.time}</p>
                        </div>
                      );
                    })}
                  </div>
                ) : (
                  <p className="text-gray-500 text-sm">No upcoming appointments</p>
                )}
              </div>
            </div>
          </div>
        );
    }
  };

  const renderModal = () => {
    if (!showModal) return null;

    const renderModalContent = () => {
      switch (modalType) {
        case 'addDog':
          return (
            <div>
              <h3 className="text-lg font-semibold mb-4">Add New Dog</h3>
              <form onSubmit={handleAddDog} className="space-y-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700">Name *</label>
                  <input
                    type="text"
                    required
                    value={dogForm.name}
                    onChange={(e) => setDogForm({ ...dogForm, name: e.target.value })}
                    className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-teal-500"
                    placeholder="Enter dog's name"
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700">Breed *</label>
                  <input
                    type="text"
                    required
                    value={dogForm.breed}
                    onChange={(e) => setDogForm({ ...dogForm, breed: e.target.value })}
                    className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-teal-500"
                    placeholder="e.g., Golden Retriever"
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700">Birth Date</label>
                  <input
                    type="date"
                    value={dogForm.birthDate}
                    onChange={(e) => setDogForm({ ...dogForm, birthDate: e.target.value })}
                    className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-teal-500"
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700">Weight (lbs)</label>
                  <input
                    type="number"
                    value={dogForm.weight}
                    onChange={(e) => setDogForm({ ...dogForm, weight: e.target.value })}
                    className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-teal-500"
                    placeholder="e.g., 65"
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700">Gender</label>
                  <select
                    value={dogForm.gender}
                    onChange={(e) => setDogForm({ ...dogForm, gender: e.target.value })}
                    className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-teal-500"
                  >
                    <option value="">Select gender</option>
                    <option value="Male">Male</option>
                    <option value="Female">Female</option>
                  </select>
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700">Microchip ID</label>
                  <input
                    type="text"
                    value={dogForm.microchipId}
                    onChange={(e) => setDogForm({ ...dogForm, microchipId: e.target.value })}
                    className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-teal-500"
                    placeholder="Optional"